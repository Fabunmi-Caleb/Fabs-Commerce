1 USER SCHEMA 
const userSchema = new mongoose.Schema({
  firstName: { type: String, required: true },
  lastName: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true }, // hashed password
  phone: { type: String },
  address: [{
    street: String,
    city: String,
    state: String,
    country: String,
    postalCode: String,
  }],
  roles: { type: String, enum: ['user', 'admin'], default: 'user' },
  createdAt: { type: Date, default: Date.now },
  orders: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Order' }],
  paymentMethods: [{
    cardType: { type: String },
    cardNumber: { type: String }, // encrypt this for security
    expiry: { type: String },
  }],
  wishList: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Product' }]
});

2 PRODUCT SCHEMA
const productSchema = new mongoose.Schema({
  name: { type: String, required: true },
  description: { type: String },
  price: { type: Number, required: true },
  category: { type: mongoose.Schema.Types.ObjectId, ref: 'Category', required: true },
  brand: { type: String },
  stock: { type: Number, required: true }, // inventory count
  images: [String], // Array of image URLs
  ratings: [{
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    rating: { type: Number, min: 1, max: 5 },
    comment: { type: String }
  }],
  tags: [String],
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});

3 CART SCHEMA 
const cartSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  items: [{
    productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },
    quantity: { type: Number, default: 1 }
  }],
  totalPrice: { type: Number, required: true }, // Total calculated price of items
  createdAt: { type: Date, default: Date.now }
});

4 ORDER SCHEMA 
const orderSchema = new mongoose.Schema(
  {
    userId: { type: Schema.Types.ObjectId, ref: "User", required: false }, // null for guest
    items: [
      {
        productId: {
          type: Schema.Types.ObjectId,
          ref: "Product",
          required: true,
        },
        productName: { type: String, required: true },
        productPrice: { type: Number, required: true },
        quantity: { type: Number, required: true },
      },
    ],
    totalItems: { type: Number, required: true },
    totalAmount: { type: Number, required: true },
    shippingAddress: { type: Object, required: true },
    paymentInfo: {
      id: { type: String, required: true },
      status: { type: String, required: true },
    },
    orderStatus: { type: String, default: "Processing" },
   createdAt: { type: Date, default: Date.now },
   updatedAt: { type: Date, default: Date.now }
});

5 PAYMENT INFO SCHEMA
const paymentSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  orderId: { type: mongoose.Schema.Types.ObjectId, ref: 'Order', required: true },
  paymentMethod: { type: String, required: true }, // e.g., 'Credit Card', 'PayPal'
  paymentStatus: { type: String, enum: ['pending', 'completed', 'failed'], default: 'pending' },
  amount: { type: Number, required: true },
  transactionId: { type: String }, // from the payment gateway
  createdAt: { type: Date, default: Date.now }
});

6 CATEGORY SCHEMA 
const categorySchema = new mongoose.Schema({
  name: { type: String, required: true, unique: true },
  description: { type: String },
  parentCategory: { type: mongoose.Schema.Types.ObjectId, ref: 'Category' }, // For sub-categories
  createdAt: { type: Date, default: Date.now }
});

Schema Relationships Overview:
User → Orders (One-to-Many)
User → Cart (One-to-One)
User → Reviews/Ratings (One-to-Many) //actually (One to One)
User → Payment Methods (One-to-Many)
Order → Products (Many-to-Many)
Order → ShippingMethod (Many-to-One)
Product → Categories (Many-to-One)
Product → Reviews/Ratings (One-to-Many)